<div class="inner-hero-section">
    {%- if section.settings.image != blank -%}
        <picture>
            <source src="{{ section.settings.image | img_url: '300x' }} 300w, {{ section.settings.image | img_url: '500x' }} 500w" media="(max-width: 550px)"/>
            <source src="{{ section.settings.image | img_url: '640x' }} 640w, {{ section.settings.image | img_url: '1024x' }} 1024w" media="(max-width: 1024px)"/>
            <source src="{{ section.settings.image | img_url: '1200x' }} 1200w"/>
            <img src="{{ section.settings.image | img_url: '640x' }}" alt="{{ section.settings.image.alt }}"/>
        </picture>
    {%- else -%}
        {% capture current %}
            {% cycle 1, 2 %}
        {% endcapture %}
        {{ 'lifestyle-' | append: current | placeholder_svg_tag: 'placeholder-svg' }}
    {%- endif -%}
    <div class="container">
        <div class="hero text-center">
            <h1>{{ section.settings.title }}</h1>
            {{ section.settings.description }}
            <a href="{{ section.settings.button_link }}" class="btn btn-secondary">
                {{- section.settings.button_label -}}
            </a>
            <button id="open__quiz" type="button" class="btn btn-info">Take Quiz</button>
        </div>
    </div>

    <div id="quiz">
        <div class="quiz__content d-flex flex-column">
            <div class="quiz__header">
                <span class="close">&times;</span>
            </div>
            <div class="quiz__body d-flex flex-column justify-content-center align-items-center h-100">
                <button class="btn btn-warning py-2 px-4 start-quiz">Start</button>

                    <div class="questions">
                        <div id="hud">
                            <div id="hud-item">
                                <div class="hud-question">
                                    <p>
                                        Question
                                    </p>
                                    <h1 id="questionCounter">1/3</h1>
                                </div>
                         <div class="hud-score">
                            <p>Score</p>
                            <h1 id="scoreCounter">0</h1>
                         </div>
                            <div id="progressBar">
                            <div id="progressBarFull">
                            </div>
                            </div>
                        </div>
                    </div>
                    <div class="questions__content">
                        <p class="quiz__question">
                            What is the answer to this question</p>
                        <div class="quiz__choice d-flex">
                            <p class="choice__prefix">A</p>
                            <p class="choice__question" data-number="1">Question 1</p>
                        </div>
                        <div class="quiz__choice d-flex">
                            <p class="choice__prefix">B</p>
                            <p class="choice__question" data-number="2">Choice 2</p>
                        </div>
                        <div class="quiz__choice d-flex">
                            <p class="choice__prefix">C</p>
                            <p class="choice__question" data-number="3">Choice 3</p>
                        </div>
                        <div class="quiz__choice d-flex">
                            <p class="choice__prefix">D</p>
                            <p class="choice__question" data-number="4">Choice 4</p>
                        </div>
                    </div>                    
                </div>

                <div id="end">
                    <div id="finalScore"></div>
                </div>

            </div>
        </div>
    </div>

    

</div>

<style>
    #hud-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
    }
    #quiz {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0, 0, 0); /* Fallback color */
        background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */
        
    }
    .quiz__content {
        position: relative;
        background-color: #fefefe;
        margin: auto;
        padding: 0;
        border: 1px solid #888;
        width: 80%;
        height: 80%;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
        -webkit-animation-name: animatetop;
        -webkit-animation-duration: 0.4s;
        animation-name: animatetop;
        animation-duration: 0.4s;
        opacity:0;
        top: -300px;
        transition: all 0.5s;
    }

    .show {
        opacity: 1;
        top: 0;
    }
    .quiz__choice {
        border: 1px solid navy;
        margin: 5px;
        border-radius: 3px;
    }
    .quiz__choice .choice__question {
        width: 100%;
    }
    .quiz__choice:hover {
        cursor: pointer;
        box-shadow: 0 0.4rem 1.4rem 0 rgba(86, 185, 233, 0.5);
        transform: translateY(-0.1rem);
        transition: transform 150ms;
    }
    .quiz__choice .choice__prefix {
        background-color: navy;
        color: white;
    }
    .quiz__choice > p {
        margin: 0;
        padding: 5px 8px;
    }
    .questions {
        display: none;
    }
    /* Add Animation */
    @-webkit-keyframes animatetop {
        from {
            top: -300px;
            opacity: 0
        }
        to {
            top: 0;
            opacity: 1
        }
    }

    @keyframes animatetop {
        from {
            top: -300px;
            opacity: 0
        }
        to {
            top: 0;
            opacity: 1
        }
    }
    /* The Close Button */
    .close {
        float: right;
        font-size: 28px;
        font-weight: bold;
    }
    .close:hover,
    .close:focus {
        color: #000;
        text-decoration: none;
        cursor: pointer;
    }
    .chosen-answer-true {
        background: greenyellow;
        color: #fff;
    }
    .chosen-answer-false {
        background: red;
        color: #fff;
    }
    #hud {
        display: flex;
        justify-content: center;
    }
    #progressBar {
        width: 200px;
        height: 40px;
        border: 5px solid navy;
    }
    #progressBarFull {
        height: 30px;
        width: 0%;
        background-color: navy;
    }

</style>

<script>
    
    var modal = document.getElementById("quiz");

    var btn = document.getElementById("open__quiz");

    var span = document.getElementsByClassName("close")[0];
    var modalContent = document.querySelector('.quiz__content');

    var progressBarFull = document.getElementById('progressBarFull');

    btn.onclick = function() {
        modal.style.display = "block";
        modalContent.classList.add('show');
    }

    span.onclick = function() {
        modalContent.classList.remove('show');
        setTimeout(()=>{
           modal.style.display = "none";
           //localStorage.clear('vrednost');
           getNewQuestion();
        }, 500) 
        
    }

    var startQuiz = document.querySelector('.start-quiz');
    var questionsWrapper = document.querySelector('.questions');
    startQuiz.addEventListener('click', function() {
        setTimeout(() => {
            this.style.display = 'none';
            questionsWrapper.style.display = 'block';
            questionsWrapper.classList.add('questions-active');

// questions.children.classList.add('active');
        }, 1000)
    })

    var question = document.querySelector('.quiz__question');
    const choices = Array.from(document.getElementsByClassName('choice__question'));      
    const questionCounterText = document.getElementById('questionCounter');
    const questionsEnd = document.getElementById('end'); 
    const scoreCounter = document.getElementById('scoreCounter');
    storedAnswers = [];
    questionsEnd.style.display = "none";
    console.log(choices);

    let currentQuestion = {}
    let acceptingAnswers = false;
    let score = 0;
    let questionCounter = 0;     
    let availableQuestions;
    let questions = [
        {
            question: 'Inside which HTML element do we put the JavaScript??',
            choice1: '<script>',
            choice2: '<javascript>',
            choice3: '<js>',
            choice4: '<scripting>',
            answer: 1
        }, {
            question: "What is the correct syntax for referring to an external script called 'xxx.js'?",
            choice1: "<script href='xxx.js'>",
            choice2: "<script name='xxx.js'>",
            choice3: "<script src='xxx.js'>",
            choice4: "<script file='xxx.js'>",
            answer: 3
        }, {
            question: " How do you write 'Hello World' in an alert box?",
            choice1: "msgBox('Hello World');",
            choice2: "alertBox('Hello World');",
            choice3: "msg('Hello World');",
            choice4: "alert('Hello World');",
            answer: 4
        }
    ];

    const MAX_QUESTIONS = 3;

    startGame = () => {
        questionCounter = 0;
        questionIndex = 1;
        availableQuestions = [... questions];
        console.log(availableQuestions);
        getNewQuestion();
    }

    getNewQuestion = () => {
        if (availableQuestions.length == 0 || questionCounter >= MAX_QUESTIONS) {
            questionsWrapper.style.display ="none";
            questionsEnd.style.display = "block";
            getValueFromArray();
           
        } else {
        questionCounter++;        
        
        questionCounterText.innerText = `${questionCounter}/${MAX_QUESTIONS}`;        
        
        progressBarFull.style.width = `${(questionCounter/MAX_QUESTIONS)*100}%`;
        const questionIndex = Math.floor(Math.random() * availableQuestions.length);
        currentQuestion = availableQuestions[questionIndex];
        question.innerText = currentQuestion.question;
        choices.forEach((choice) => {
            const number = choice.dataset["number"];
            choice.innerText = currentQuestion["choice" + number];
        });
        availableQuestions.splice(questionIndex, 1);
        acceptingAnswers = true;
    }
    }

    choices.forEach((choice) => {
        choice.addEventListener('click', e => {
            console.log(e.target);
            if(!acceptingAnswers) return;
            acceptingAnswers = false;
            const selectedChoice = e.target;
            const selectedAnswer = selectedChoice.dataset['number'];
            const SelectedAnswerText = selectedChoice.innerText;           

            pushToArray(selectedAnswer);

           var classToApply = 'chosen-answer-true';
           if (selectedAnswer == currentQuestion.answer) {
                var classToApply = 'chosen-answer-true';             
                incrementScore(10);             
           } else {
            var classToApply = 'chosen-answer-false';
           }
            selectedChoice.parentElement.classList.add(classToApply);
            setTimeout(()=> {
                selectedChoice.parentElement.classList.remove(classToApply);
                getNewQuestion();
            }, 1000)
        });
    })

    incrementScore = num => {
    score += num;
    scoreCounter.innerText = score;
    }
    
    pushToArray = value => {
      storedAnswers.push(value);      
      localStorage.setItem("vrednost", storedAnswers);     
    }

    function getValueFromArray() {
        var storedNames = localStorage.getItem("vrednost");
        console.log(storedNames);        
        var option1 = [1,1,1];
        var option2 = [1,1,2];
        var option3 = [4,4,4];

        if(option1.toString() === storedNames.toString()) {
            return window.location.assign("/collections/safety-gear")
        }
        else if (option2.toString() === storedNames.toString()) {
            return window.location.assign("/collections/bikes")
        }
         else if (option3.toString() === storedNames.toString()) {
            return window.location.assign("/collections/apparel")
        } else {
            document.getElementById('finalScore').innerText = "Test Failed";
        }
    }

    startGame();

</script>

{% schema %}
    {
        "name": "Hero",
        "class": "simple-hero-section",
        "tag": "section",
        "settings": [
            {
                "type": "image_picker",
                "id": "image",
                "label": "Hero Background Image"
            },
            {
                "type": "text",
                "id": "title",
                "default": "Example Heading",
                "label": "Hero Title"
            },
            {
                "type": "richtext",
                "id": "description",
                "default": "<p>Example Paragraph</p>",
                "label": "Hero Description"
            },
            {
                "type": "text",
                "id": "button_label",
                "default": "Button",
                "label": "Hero Button Label"
            }, {
                "type": "url",
                "id": "button_link",
                "label": "Heading Button Link"
            }
        ],
        "presets": [
            {
                "category": "Heros",
                "name": "Simple Hero"
            }
        ]
    }
{% endschema %}